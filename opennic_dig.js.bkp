#!/usr/bin/env node

'use strict';

var argv = require('optimist')
	.usage('Usage: $0')
	.demand(['h', 'c', 'u'])
	.alias({})
	.describe({
		'h': 'Hostname',
		'c': 'Channelname',
		'u': 'Username',
		'p': 'Users-JSON-File',
		'f': 'Facts-JSON-File'
	})
	.argv;

// var global = Object.create(null);
global.config = Object.create(null);
global.config.hostname = argv.h;
global.config.channelname = argv.c;
global.config.username = argv.u;
global.config.usersfile = argv.p;
global.config.factsfile = argv.f;
global.config.prefixes = ['./', '.', '!'];
global.config.localversion = '0.0.13-1 fusl~2014-02-10';
global.config.irclines = 4;
global.config.slots = {
	dig: {
		uses: {},
		use: 0,
		max: 2
	},
	host: {
		uses: {},
		use: 0,
		max: 2
	},
	ping: {
		uses: {},
		use: 0,
		max: 2
	},
	t2test: {
		uses: {},
		use: 0,
		max: 2
	}
};
global.config.ipv4regex = new RegExp('^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$');
global.config.ipv6regex = new RegExp('^\\s*((([0-9A-Fa-f]{1,4}:){7}([0-9A-Fa-f]{1,4}|:))|(([0-9A-Fa-f]{1,4}:){6}(:[0-9A-Fa-f]{1,4}|((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3})|:))|(([0-9A-Fa-f]{1,4}:){5}(((:[0-9A-Fa-f]{1,4}){1,2})|:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3})|:))|(([0-9A-Fa-f]{1,4}:){4}(((:[0-9A-Fa-f]{1,4}){1,3})|((:[0-9A-Fa-f]{1,4})?:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){3}(((:[0-9A-Fa-f]{1,4}){1,4})|((:[0-9A-Fa-f]{1,4}){0,2}:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){2}(((:[0-9A-Fa-f]{1,4}){1,5})|((:[0-9A-Fa-f]{1,4}){0,3}:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){1}(((:[0-9A-Fa-f]{1,4}){1,6})|((:[0-9A-Fa-f]{1,4}){0,4}:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(:(((:[0-9A-Fa-f]{1,4}){1,7})|((:[0-9A-Fa-f]{1,4}){0,5}:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:)))(%.+)?\\s*$');

global.base = Object.create(null);
global.base.spawn = require('child_process').spawn;
global.base.exec = require('child_process').exec;
global.base.shellescape = require('shell-escape');
global.base.request = require('request');
global.base.fs = require('fs');
global.base.net = require('net');
global.base.irc = require('irc');

global.client = new global.base.irc.Client(global.config.hostname, global.config.username, {
	userName: Math.random().toString(16),
	realName: global.config.username + ' ' + global.config.localversion,
	port: 6667,
	debug: false,
	showErrors: false,
	autoRejoin: true,
	autoConnect: true,
	channels: ['#' + global.config.channelname],
	secure: false,
	selfSigned: false,
	certExpired: false,
	floodProtection: false,
	floodProtectionDelay: 500,
	sasl: false,
	stripColors: false,
	channelPrefixes: '&#',
	messageSplit: 512
});

global.client.on('error', function (msg) {
	console.log('error: ', msg);
});
global.base.xexec = require('child_process').exec;
global.base.exec = function (command, options, callback) {
        command = command.replace(/\b[\t\n]\b/g, ' ').replace(/\s{2,}/g, ' ').split(' ');
        var path = command.shift();
        var args = command;
        var output = [];
	
        var proc = global.base.spawn(path, args);
	
        if (typeof options === 'object' && typeof options.timeout === 'number') {
                var timeout = setTimeout(function () {
                        proc.kill('SIGKILL');
                }, options.timeout);
        }
	
        proc.stdout.on('data', function (chunk) {
                output.push(chunk);
        });
        proc.stderr.on('data', function (chunk) {
                output.push(chunk);
        });
	
        var stdoutclosed = false;
        var stderrclosed = false;
        proc.stdout.once('close', function () {
                if (timeout) {
                        clearTimeout(timeout);
                        timeout = false;
                }
                if (stderrclosed) {
                        callback(output.join('').toString('utf8'));
                        return;
                }
                stdoutclosed = true;
        });
        proc.stderr.once('close', function () {
                if (timeout) {
                        clearTimeout(timeout);
                        timeout = false;
                }
                if (stdoutclosed) {
                        callback(output.join('').toString('utf8'));
                        return;
                }
                stderrclosed = true;
        });
        proc.on('error', function (e) {
                console.log(e);
        });
};
var lexec = function (command, options, callback) {
        var path = 'sh';
        var args = ['-c', command];
	var output = '';
	var managenl = function (input) {
		output += input.toString('utf8');
		if (output.split('\n').length > 1) {
			var xoutput = output.split('\n');
			callback('[' + proc.pid + '] ' + xoutput.shift());
			output = xoutput.join('\n');
			managenl('');
		}
	};
	
        var proc = global.base.spawn(path, args);
	
	callback('[' + proc.pid + '] +');
	
        if (typeof options === 'object' && typeof options.timeout === 'number') {
                var timeout = setTimeout(function () {
                        proc.kill('SIGKILL');
                }, options.timeout);
        }
	
        proc.stdout.on('data', function (chunk) {
		managenl(chunk);
        });
        proc.stderr.on('data', function (chunk) {
		managenl(chunk);
        });
	
	proc.on('exit', function () {
		callback('[' + proc.pid + '] -');
	});
	
        proc.on('error', function (e) {
                console.log(e);
        });
};

var toSprunge = function (input, cb, suffix) {
	global.base.request.post('http://sprunge.us/', {form: {sprunge: input}}, function (err, res, body) {
		if(!err && res.statusCode == 200) {
			cb(body.toString('utf8').split('\n')[0] + (suffix ? suffix : ''));
		}
	});
};

var crapfilter = function (input) {
	if (input.trim().length && input.trim().substr(0,1) !== ';') {
		return true;
	}
	return false;
};

var run = Object.create(null);
global.run = Object.create(null);
global.hiddenrun = [];
global.run.test = require('./modules/test.js');
global.run.dig = function (args, from, message, rawmessage, fromsplitter, cb) {
	var slotname = 'dig';
	
	var prohibited = false;
	args.forEach(function (arg) {
		if (prohibited) {
			return;
		}
		if (/^-.*f/.test(arg)) {
			cb('-f parameter is prohibited');
			prohibited = true;
			return;
		}
		if (/^-.*k/.test(arg)) {
			cb('-k parameter is prohibited');
			prohibited = true;
			return;
		}
	});
	if (prohibited) {
		return;
	}
	
	if (typeof global.config.slots[slotname] === 'object' && typeof global.config.slots[slotname].use === 'number' && typeof global.config.slots[slotname].max === 'number') {
		if (global.config.slots[slotname].use >= global.config.slots[slotname].max) {
			cb('All ' + slotname + '-slots are currently in use, please try again later and/or check out !slots.');
			return;
		}
		global.config.slots[slotname].use = global.config.slots[slotname].use + 1;
	}

	global.base.exec('dig ' + args.join(' '), {timeout: 60000}, function (output) {
		if (typeof global.config.slots[slotname] === 'object' && typeof global.config.slots[slotname].use === 'number' && typeof global.config.slots[slotname].max === 'number') {
			global.config.slots[slotname].use = global.config.slots[slotname].use - 1;
		}
		
		if (output.split('\n').length <= (global.config.irclines + 1) && output.length <= 1024) {
			cb(output.replace(/\b\t\b/g, ' ').replace(/\s{2,}/g, ' '));
			return;
		}
		
		var filteredoutput = output.split('\n').filter(crapfilter).join('\n');
		if (filteredoutput.split('\n').length <= global.config.irclines && filteredoutput.length > 0) {
			cb(filteredoutput.replace(/\b\t\b/g, ' ').replace(/\s{2,}/g, ' '));
			toSprunge(output, cb, ' (cont, ' + (output.split('\n').length - 1) + ' lines (' + args.join(' ') + '))');
			return;
		}
		
		toSprunge(output, cb, ' (' + (output.split('\n').length - 1) + ' lines (' + args.join(' ') + '))');
	});
};
global.run.host = function (args, from, message, rawmessage, fromsplitter, cb) {
	var slotname = 'dig';
	if (typeof global.config.slots[slotname] === 'object' && typeof global.config.slots[slotname].use === 'number' && typeof global.config.slots[slotname].max === 'number') {
		if (global.config.slots[slotname].use >= global.config.slots[slotname].max) {
			cb('All ' + slotname + '-slots are currently in use, please try again later and/or check out !slots.');
			return;
		}
		global.config.slots[slotname].use = global.config.slots[slotname].use + 1;
	}
	
	if (args.indexOf('-f') !== -1) {
		cb('-f parameter is prohibited');
		return;
	}
	
	global.base.exec('host ' + args.join(' '), {timeout: 60000}, function (output) {
		if (typeof global.config.slots[slotname] === 'object' && typeof global.config.slots[slotname].use === 'number' && typeof global.config.slots[slotname].max === 'number') {
			global.config.slots[slotname].use = global.config.slots[slotname].use - 1;
		}
		
		if (output.split('\n').length <= (global.config.irclines + 1) && output.length <= 1024) {
			cb(output.replace(/\b\t\b/g, ' ').replace(/\s{2,}/g, ' '));
			return;
		}
		
		var filteredoutput = output.split('\n').filter(crapfilter).join('\n');
		if (filteredoutput.split('\n').length <= global.config.irclines && filteredoutput.length > 0) {
			cb(filteredoutput.replace(/\b\t\b/g, ' ').replace(/\s{2,}/g, ' '));
			toSprunge(output, cb, ' (cont, ' + (output.split('\n').length - 1) + ' lines (' + args.join(' ') + '))');
			return;
		}
		
		toSprunge(output, cb, ' (' + (output.split('\n').length - 1) + ' lines (' + args.join(' ') + '))');
	});
};
global.run.botversion = function (args, from, message, rawmessage, fromsplitter, cb) {
	cb(localversion);
};
global.run.help = function (args, from, message, rawmessage, fromsplitter, cb) {
	cb('Try !prefixes, !commands, !builtinargs or !syntax');
};
global.hiddenrun.push('prefixes');
global.run.prefixes = function (args, from, message, rawmessage, fromsplitter, cb) {
	cb('Prefixes: ' + prefixes.join(' '));
};
global.hiddenrun.push('commands');
global.run.commands = function (args, from, message, rawmessage, fromsplitter, cb) {
	var commands = [];
	Object.keys(run).forEach(function (command) {
		if (global.run.perm(['check', rawmessage.prefix, command]) && global.hiddenrun.indexOf(command) === -1) {
			commands.push(command);
		}
	});
	cb('Commands: ' + (commands.length ? commands.join(' ') : 'Sorry, no commands for you :('));
};
global.hiddenrun.push('builtinargs');
global.run.builtinargs = function (args, from, message, rawmessage, fromsplitter, cb) {
	cb('Built-in args: !for <username> highlight username in result');
};
global.hiddenrun.push('syntax');
global.run.syntax = function (args, from, message, rawmessage, fromsplitter, cb) {
	cb('Syntax: (<usernames to highlight>:) <prefix><command> <command args> <built-in args>');
};
global.run.slots = function (args, from, message, rawmessage, fromsplitter, cb) {
	var output = [];
	Object.keys(global.config.slots).forEach(function (slotname) {
		output.push(slotname + ': ' + global.config.slots[slotname].use + '/' + global.config.slots[slotname].max + ' (' + (global.config.slots[slotname].use/global.config.slots[slotname].max*100) + '%)');
	});
	cb(output.join(', '));
};
global.run.rdns = function (args, from, message, rawmessage, fromsplitter, cb) {
	var ip = args[0]
	if (!ipv4regex.test(ip) && !ipv6regex.test(ip)) {
		cb('Not a valid IPv4/IPv6 address');
		return;
	} else {
		global.run.host([ip], cb);
	}
};
global.run.ping = function (args, from, message, rawmessage, fromsplitter, cb) {
	var slotname = 'ping';
	var hosts = {};
	
	if (args.length === 0) {
		cb('pong');
		return;
	}
	
	if (typeof global.config.slots[slotname] === 'object' && typeof global.config.slots[slotname].use === 'number' && typeof global.config.slots[slotname].max === 'number') {
		if (global.config.slots[slotname].use >= global.config.slots[slotname].max) {
			cb('All ' + slotname + '-slots are currently in use, please try again later and/or check out !slots.');
			return;
		}
		global.config.slots[slotname].use = global.config.slots[slotname].use + 1;
	}
	
	var ping = function (ips, cb) {
		var returnpingresults = function (ips, cb) {
			if (typeof global.config.slots[slotname] === 'object' && typeof global.config.slots[slotname].use === 'number' && typeof global.config.slots[slotname].max === 'number') {
				global.config.slots[slotname].use = global.config.slots[slotname].use - 1;
			}
			
			var output = [];
			Object.keys(ips).forEach(function (ip) {
				output.push(ip + ': ' + ips[ip]);
			});
			output = output.join('\n');
			
			if (output.split('\n').length <= (global.config.irclines + 1) && output.length <= 1024) {
				cb(output.replace(/\b\t\b/g, ' ').replace(/\s{2,}/g, ' '));
				return;
			}
			
			toSprunge(output, cb, ' (' + output.split('\n').length + ' lines (' + args.join(' ') + '))');

		};
		
		if (Object.keys(ips).length === 0) {
			if (typeof global.config.slots[slotname] === 'object' && typeof global.config.slots[slotname].use === 'number' && typeof global.config.slots[slotname].max === 'number') {
				global.config.slots[slotname].use = global.config.slots[slotname].use - 1;
			}
			return;
		}
		
		Object.keys(ips).forEach(function (ip) {
			if (ipv4regex.test(ip)) {
				var cmd = 'ping';
			} else if (ipv6regex.test(ip)) {
				var cmd = 'ping6';
			} else {
				ips[ip] = 'Not a valid ip address or hostname: ' + ip;
				var doreturn = true;
				Object.keys(ips).forEach(function (ip) {
					if (ips[ip] === null) {
						doreturn = false;
					}
				});
				if (doreturn) {
					returnpingresults(ips, cb);
				}
				return;
			}
			global.base.exec(cmd + ' -w 5 -i 0.2 ' + ip, {timeout: 10000}, function (output) {
				output = output.split('\n');
				output = output[output.length - 2];
				ips[ip] = (output !== '') ? output.toString('utf8') : 'down (IPv6 is currently not working)';
				var doreturn = true;
				Object.keys(ips).forEach(function (ip) {
					if (ips[ip] === null) {
						doreturn = false;
					}
				});
				if (doreturn) {
					returnpingresults(ips, cb);
				}
			});
		});
	};
	
	var lookup = function (host, cb) {
		global.base.exec('host ' + host, {timeout: 60000}, function (output) {
			var hosts = [];
			output = output.split('\n');
			output.forEach(function (host) {
				if (/ has address /.test(host)) {
					hosts.push(host.split(' ')[3]);
				} else if (/has IPv6 address /.test(host)) {
					hosts.push(host.split(' ')[4]);
				}
			});
			if (hosts.length === 0) {
				cb([host]);
			} else {
				cb(hosts);
			}
		});
	};
	
	var openlookups = 0;
	args.forEach(function (arg) {
		var host = arg;
		if (ipv4regex.test(host) || ipv6regex.test(host)) {
			hosts[host] = null;
		} else {
			openlookups = openlookups + 1;
			lookup(host, function (ips) {
				ips.forEach(function (ip) {
					hosts[ip] = null;
				});
				openlookups = openlookups - 1;
				if (openlookups <= 0) {
					ping(hosts, cb);
				}
			});
		}
	});
	if (openlookups <= 0) {
		ping(hosts, cb);
	}
};
global.run.t2test = function (args, from, message, rawmessage, fromsplitter, cb) {
	console.log(JSON.stringify(args));
	var ip = args[0];
	var slotname = 't2test';
	if (!ipv4regex.test(ip) && !ipv6regex.test(ip)) {
		cb('Not a valid ip address');
		return;
	}
	if (args.length === 0) {
		return;
	}
	
	if (typeof global.config.slots[slotname] === 'object' && typeof global.config.slots[slotname].use === 'number' && typeof global.config.slots[slotname].max === 'number') {
		if (global.config.slots[slotname].use >= global.config.slots[slotname].max) {
			cb('All ' + slotname + '-slots are currently in use, please try again later and/or check out !slots.');
			return;
		}
		global.config.slots[slotname].use = global.config.slots[slotname].use + 1;
	}
	
	cb('This Tier2 test/check is experimental, please refer to the official test: http://www.opennicproject.org/t2log/t2.php -- However, i\'m trying to test the server, please be patient...');
	
	var tests = [
		{
			'name': 'Connectivity',
			'test': function (ip, cb) {
				global.base.xexec('dig @' + ip + ' . +time=5 +tries=2 | egrep \';; Query time: [0-9]+ msec\' | awk \'{print $4}\'', {timeout: 15000}, function (err, output, stderr) {
					output = output.split('\n')[0];
					if (/^[0-9]+$/.test(output)) {
						if (Number(output) >= 1000) {
							var code = 2;
						} else {
							var code = 0;
						}
					} else {
						var code = 1;
					}
					cb(code, output);
				});
			},
		},
		{
			'name': 'Reply size',
			'test': function (ip, cb) {
				global.base.xexec('dig @' + ip + ' rs.dns-oarc.net. TXT IN +short +time=5 +tries=2 | grep \'DNS reply size limit\' | awk \'{print $9}\'', {timeout: 15000}, function (err, output, stderr) {
					output = output.split('\n')[0];
					if (Number(output) >= 3500) {
						var code = 0;
					} else {
						var code = 2;
					}
					cb(code, output);
				});
			}
		},
		{
			'name': 'Port rand',
			'test': function (ip, cb) {
				global.base.xexec('dig @' + ip + ' +short porttest.dns-oarc.net TXT +time=5 +tries=2 | grep is | awk \'{print $3}\' | awk -F\':\' \'{print $1}\'', {timeout: 15000}, function (err, output, stderr) {
					output = output.split('\n')[0];
					if (output === 'GREAT') {
						var code = 0;
					} else if (output === 'GOOD') {
						var code = 2;
					} else {
						var code = 2; //1;
					}
					cb(code, output);
				});
			}
		},
		{
			'name': 'NXDOMAIN',
			'test': function (ip, cb) {
				global.base.xexec('dig @' + ip + ' ' + Math.random().toString(32).split('.')[1] + Math.random().toString(32).split('.')[1] + '.'+Math.random().toString(32).split('.')[1] + '. TXT IN +time=5 +tries=2 | grep status: | awk -F\'status: \' \'{print $2}\' | awk -F\',\' \'{print $1}\'', {timeout: 15000}, function (err, output, stderr) {
					output = output.split('\n')[0];
					if (output === 'NXDOMAIN') {
						var code = 0;
					} else {
						var code = 1;
					}
					cb(code, output);
				});
			}
		},
		{
			'name': 'Version',
			'test': function (ip, cb) {
				global.base.xexec('dig @' + ip + ' version.bind. TXT CHAOS +short +time=5 +tries=2', {timeout: 15000}, function (err, output, stderr) {
					output = output.split('\n')[0];
					if (output === '' || output === '""' || output === '"[hidden]"') {
						var code = 0;
					} else {
						var code = 2;
					}
					cb(code, output);
				});
			}
		},
		{
			'name': 'OpenNIC Domains',
			'test': function (ip, cb) {
				var domains = ['.', 'bbs.', 'dns.opennic.glue.', 'dyn.', 'free.', 'fur.', 'geek.', 'gopher.', 'indy.', 'ing.', 'micro.', 'neo.', 'null.', 'opennic.glue.', 'oss.', 'oz.', 'parody.', 'pirate.'];
				var digcmd = [];
				domains.forEach(function (domain) {
					digcmd.push('dig @' + ip + ' SOA ' + domain + ' +short +time=5 +tries=2');
				});
				digcmd = digcmd.join(';');
				global.base.xexec('(' + digcmd + ') | egrep -v "^;;"', {timeout: 15000}, function (err, output, stderr) {
					output = output.split('\n');
					var should = [
						'ns0.opennic.glue.',
						'ns6.opennic.glue.',
						'ns0.opennic.glue.',
						'ns6.opennic.glue.',
						'ns1.opennic.glue.',
						'ns11.ns.ph2network.org.',
						'ns1.opennic.glue.',
						'ns7.opennic.glue.',
						'ns1.opennic.glue.',
						'ns5.opennic.glue.',
						'ns5.opennic.glue.',
						'ns3.opennic.glue.',
						'ns1.opennic.glue.',
						'ns0.opennic.glue.',
						'ns2.opennic.glue.',
						'ns10.opennic.glue.',
						'ns2.opennic.glue.',
						'ns9.opennic.glue.'
					];
					var code = 0;
					should.forEach(function (singleshould) {
						var x = output.shift();
						if (!x || singleshould !== x.split(' ')[0]) {
							code = 1;
						}
					});
					cb(code, output);
				});
			}
		}
	];
	var results = {};
	var success = [];
	var fail = [];
	var warn = [];
	tests.forEach(function (test) {
		var testname = test.name;
		var testfunction = test.test;
		testfunction(ip, function (status, result) {
			results[testname] = {
				'status': status,
				'result': result
			};
			if (status === 0) {
				success.push(testname);
			} else if (status === 1) {
				fail.push(testname);
			} else if (status === 2) {
				warn.push(testname);
			}
			if (Object.keys(results).length >= tests.length) {
				var resulttext = [];
				if (fail.length === 0) {
					resulttext.push(ip + ': Passed');
				} else {
					resulttext.push(ip + ': Failed');
				}
				
				if (fail.length) {
					resulttext.push('Fail: ' + fail.join(', '));
				}
				
				if (warn.length) {
					resulttext.push('Warn: ' + warn.join(', '));
				}
				
				cb (resulttext.join('; '));
				
				if (typeof global.config.slots[slotname] === 'object' && typeof global.config.slots[slotname].use === 'number' && typeof global.config.slots[slotname].max === 'number') {
					global.config.slots[slotname].use = global.config.slots[slotname].use - 1;
				}
			}
		});
	});
};
global.run.fact = function (args, from, message, rawmessage, fromsplitter, cb) {
	var facts = {};
	try {
		facts = JSON.parse(global.base.fs.readFileSync(factsfile));
	} catch(e) {
		console.log(e);
	}

	var mode = args.shift();
	var factname = args.shift();
	var facttext = args.join(' ');
	
	var add = function (factname, facttext) {
		cb('Function not yet implemented');
	};
	var del = function (factname) {
		cb('Function not yet implemented');
	};
	var mod = function (factname, facttext) {
		cb('Function not yet implemented');
	};
	var list = function () {
		var factlist = [];
		Object.keys(facts).forEach(function (factname) {
			factlist.push(factname);
		});
		cb(factlist.join(' '));
	};
	var get = function (factname) {
		if(facts[factname] && facts[factname].facttext) {
			cb(facts[factname].facttext);
		} else {
			cb(factname + ': No such fact-entry');
		}
	};
	
	if (mode === 'add') {
		add(factname, facttext);
		return;
	}
	if (mode === 'del') {
		del(factname);
		return;
	}
	if (mode === 'mod') {
		mod(factname);
		return;
	}
	if (mode === 'list') {
		list();
		return;
	}
	get(mode);
};
global.run['?'] = global.run.fact;
global.run.exit = function (args, from, message, rawmessage, fromsplitter, cb) {
	process.exit(0);
};
var execdb = Object.create(null);
global.run.exec = function (args, from, message, rawmessage, fromsplitter, cb) {
	if (args[0] === '+') {
		if (!execdb[from]) {
			execdb[from] = [];
			cb('Script started.');
			return;
		}
		cb('Script already running, ignored');
	} else if (args[0] === '-') {
		if (!execdb[from]) {
			cb('No script started.');
			return;
		}
		global.base.lexec(execdb[from].join('\n'), {}, cb);
		delete execdb[from];
	} else  if (execdb[from]) {
		execdb[from].push(args.join(' '));
	} else {
		global.base.lexec(args.join(' '), {}, cb);
	}
};
global.run.global = function (args, from, message, rawmessage, fromsplitter, cb) {
	try {
		cb(new Function(args.join(' '))(args, from, message, rawmessage, fromsplitter, cb));
	} catch(e) {
		cb(e);
	}
};
global.run.opme = function (args, from, message, rawmessage, fromsplitter, cb) {
	client.send('MODE', '#' + global.config.channelname, '+o', from);
};
global.run.whoami = function (args, from, message, rawmessage, fromsplitter, cb) {
	cb(rawmessage.prefix);
};
global.run.perm = function (args, from, message, rawmessage, fromsplitter, cb) {
	if (typeof cb === 'function') {
		cb(global.run.perm(args, from, message, rawmessage, fromsplitter, false));
		return;
	}
	try {
		var perms = JSON.parse(global.base.fs.readFileSync(global.config.usersfile));
	} catch(e) {
		console.log(e);
		return;
	}
	if (args[0] === 'check' || args[0] === '?') {
		var user = args[1];
		var right = args[2];
		if (!user) {
			return Object.keys(perms).join(' ');
		}
		if (!right) {
			if (perms[user]) {
				return Object.keys(perms[user]).join(' ');
			}
		}
		if (perms) {
			if (typeof perms[user] !== 'undefined') {
				if (typeof perms[user][right] !== 'undefined') {
					return !!perms[user][right];
				}
				if (typeof perms[user]['*'] !== 'undefined') {
					return !!perms[user]['*'];
				}
			}
			if (typeof perms['*'] !== 'undefined') {
				if (typeof perms['*'][right] !== 'undefined') {
					return !!perms['*'][right];
				}
				if (typeof perms['*']['*'] !== 'undefined') {
					return !!perms['*']['*'];
				}
			}
		}
		return false;
	}
	var user = args[0] ? args[0] : null;
	var right = args[1] ? args[1] : null;
	var jump =  args[2] ? args[2].toLowerCase() : null;
	
	if (jump === 'allow') {
		jump = true;
	} else if (jump === 'deny') {
		jump = false;
	} else {
		jump = null;
	}

	var xreturn = [];
	if (right && (jump === true || jump === false)) {
		if (global.run.perm(['check', rawmessage.prefix, right]) && !global.run.perm(['check', user, '*'])) {
			if (!perms[user]) {
				perms[user] = {};
				xreturn.push('New user ' + user + ' created in permission table.');
			}
			perms[user][right] = jump;
			xreturn.push('User ' + user + ' permission ' + right + ' set to ' + jump);
		} else {
			xreturn.push('You do not have permissions to create user ' + user + ' with permission ' + right + ' set to ' + jump + ' in permission table.');
		}
	} else if (right) {
		if (global.run.perm(['check', rawmessage.prefix, right]) && !global.run.perm(['check', user, '*'])) {
			if (perms[user]) {
				delete perms[user][right];
			}
			xreturn.push('User ' + user + ' permission ' + right + ' removed from permission table.');
		} else {
			xreturn.push('You do not have permissions to remove user ' + user + ' permission ' + right + ' from permission table.');
		}
	} else if (user) {
		if (global.run.perm(['check', rawmessage.prefix, '*']) && !global.run.perm(['check', user, '*'])) {
			delete perms[user];
			xreturn.push('User ' + user + ' removed from permission table.');
		} else {
			xreturn.push('You do not have permissions to remove user ' + user + ' from permission table.');
		}
	}

	global.base.fs.writeFileSync(global.config.usersfile, JSON.stringify(perms));
	if (xreturn.length) {
		return xreturn.join('\n');
	}
};

var forsplitter = function (from, message, rawmessage, fromsplitter) {
	var xfrom = [from];
	var splitmessage = message.split(': ');
	var splitfrom = [from].concat(splitmessage.shift().split(/[ ,]/));
	splitfrom.forEach(function (splitfrom_single) {
		if (xfrom.indexOf(splitfrom_single) === -1 && splitfrom_single.trim() !== '') {
			xfrom.push(splitfrom_single);
		}
	});
	splitmessage = splitmessage.join(': ');
	messagelistener(xfrom, splitmessage, rawmessage, true);
};


var messagelistener = function (from, message, rawmessage, fromsplitter) {
	if (typeof from === 'object' && from instanceof Array) {
		var xfrom = from;
	} else {
		var xfrom = [from];
	}
	var args = message.replace(/\b[\t\n]\b/g, ' ').replace(/\s{2,}/g, ' ').split(' ');
	var module = args.shift();
	var noprefix = true;
	global.config.prefixes.forEach(function (prefix) {
		if (!noprefix) {
			return;
		}
		if (module.substr(0, prefix.length) === prefix) {
			module = module.substr(prefix.length);
			noprefix = false;
		}
	});

	if (noprefix) {
		if (!fromsplitter) {
			forsplitter(from, message, rawmessage, fromsplitter);
		}
		return;
	}
	
	if (!global.run[module] || typeof global.run[module] !== 'function') {
		if (!fromsplitter) {
			forsplitter(from, message, rawmessage, fromsplitter);
		}
		return;
	}
	
	if (!global.run.perm(['check', rawmessage.prefix, module])) {
		client.say('#' + global.config.channelname, from + ': You do not have permissions to use ' + module);
		return;
	}
	
	while (args[args.length - 2] === '!for') {
		if (xfrom.indexOf(args[args.length - 1]) === -1 && args[args.length - 1].trim() !== '') {
			xfrom.push(args[args.length - 1]);
		}
		args = args.slice(0, args.length - 2);
		if (xfrom.length > 5) {
			client.say('#' + global.config.channelname, from + ': Illegal use of !for');
			return;
		}
	}
	
	global.run[module](args, from, message, rawmessage, fromsplitter, function (output) {
		if (typeof output === 'undefined') {
			return;
		}
		output = output.toString('utf8');
		output = output.split('\n');
		output.forEach(function (outputline) {
			if (outputline.trim() === '') {
				return;
			}
			client.say('#' + global.config.channelname, xfrom.join(', ') + ': ' + outputline);
		});
	});
};

client.on('message#' + global.config.channelname, messagelistener);
